{"version":3,"sources":["services/AuthService.tsx","actions/protfolioActions.tsx","components/PositionItem.tsx","components/AddTransactionForm.tsx","components/Positions.tsx","components/TransactionItem.tsx","components/Transactions.tsx","components/Header.tsx","components/login/LoginForm.tsx","components/Portfolio.tsx","reducers/portfolioReducer.tsx","reducers/index.tsx","components/support/QueryItem.tsx","components/support/QueryPost.tsx","components/support/Queries.tsx","actions/supportActions.tsx","components/support/AddQueryForm.tsx","components/support/UserSupport.tsx","App.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["AuthService","Object","classCallCheck","this","userManager","UserManager","authority","client_id","redirect_uri","response_type","scope","events","addUserLoaded","Log","logger","console","level","INFO","createClass","key","value","_isAuthenticated","asyncToGenerator","regenerator_default","a","mark","_callee","_this","wrap","_context","prev","next","abrupt","Promise","resolve","reject","getUser","then","user","access_token","expired","stop","apply","arguments","signinRedirectCallback","sessionStorage","setItem","catch","error","log","signinRedirect","signinSilent","signoutRedirect","undefined","instance","getPortfolioPositionsCreator","_ref","dispatch","header","response","portfolioState","gotPositionsAction","getInstance","sent","Authorization","axios","get","PORTFOLIO_SERVICE_DOMAIN","headers","data","type","positions","isAuthenticated","_x","getPortfolioTransactionsCreator","transactionType","length","_ref2","_callee2","transactionsList","_context2","transactions","_x2","PositionItem","props","position","react","cryptoCurrency","symbol","quantity","AddTransactionForm","possibleConstructorReturn","getPrototypeOf","call","state","cryptoSymbol","price","onChange","bind","assertThisInitialized","onSelectChange","handleSubmit","e","setState","defineProperty","target","name","preventDefault","transaction","addTransaction","className","onSubmit","required","React","connect","history","_ref3","_callee3","_context3","post","_x3","addPortfolioTransactionCreator","Positions","map","components_PositionItem","components_AddTransactionForm","TransactionItem","id","handleCheckboxChange","Transactions","event","toggleCheckbox","transactionId","selectedTransactionIds","has","delete","add","Set","loadTransactions","deleteTransactions","Array","from","_this2","index","components_TransactionItem","portfolioTransactions","transactionIds","_ref4","_callee4","_context4","_x4","deleteTransactionsCreator","Header","href","Link","to","LoginForm","authService","login","Portfolio","loadPositions","authenticated","components_Header","Switch","Route","path","component","components_Positions","portfolio","portfolioInitialState","supportInitialState","queries","portfolioTransactionsInitialState","combineReducers","action","support","QueryItem","query","onClick","onTableRowClick","subject","username","resolved","creationTime","QueryPost","content","Queries","displayPostsForQuery","currentTarget","queriesList","find","q","support_QueryPost","posts","support_QueryItem","getSupportQueriesCreator","SUPPORT_SERVICE_DOMAIN","AddQueryForm","navToMainSupportPage","addQuery","Redirect","put","addQueryCreator","UserSupport","loadQueries","support_Queries","App","react_default","createElement","es","store","initialState","createStore","rootReducer","compose","applyMiddleware","thunk","BrowserRouter","es_Route","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc24ae3a.chunk.js","sourcesContent":["import { Log, User, UserManager , WebStorageStateStore} from 'oidc-client';\r\n\r\nexport class AuthService {\r\n  private userManager: UserManager;\r\n  private static instance: AuthService;\r\n\r\n  constructor() {\r\n    const settings = {\r\n      authority: \"http://localhost:8081/auth/realms/CryptoInc\",\r\n      client_id: \"crypto-portfolio-react\",\r\n      redirect_uri: \"http://localhost:3000/callback.html\",\r\n      response_type: 'id_token token',\r\n      scope: \"openid profile email\"\r\n    };\r\n    this.userManager = new UserManager(settings);\r\n    this.userManager.events.addUserLoaded\r\n    Log.logger = console;\r\n    Log.level = Log.INFO;\r\n    \r\n  }\r\n\r\n  public static getInstance(): AuthService {\r\n    if (AuthService.instance === undefined) {\r\n      AuthService.instance = new AuthService();\r\n    }\r\n    return AuthService.instance;\r\n  }\r\n\r\n  public async isAuthenticated() : Promise<boolean>{    \r\n    return new Promise((resolve, reject) => {\r\n      this.getUser().then(user => {resolve((user != null && user.access_token != null && !user.expired))});;\r\n    });\r\n  }\r\n\r\n  public completeLogin() {\r\n    this.userManager.signinRedirectCallback()\r\n       .then(user => sessionStorage.setItem(\"access_token\",user.access_token))\r\n       .catch((error) => console.log(error));\r\n }\r\n\r\n\r\n  public getUser(): Promise<User | null> {\r\n    return this.userManager.getUser();\r\n  }\r\n\r\n  public login(): Promise<void> {\r\n    return this.userManager.signinRedirect();\r\n  }\r\n\r\n  public renewToken(): Promise<User> {\r\n    return this.userManager.signinSilent();\r\n  }\r\n\r\n  public logout(): Promise<void> {\r\n    return this.userManager.signoutRedirect();\r\n  }\r\n\r\n}","import axios from \"axios\";\r\nimport {GotPositionsAction, PortfolioState,AddPortfolioTransaction, GotPortfolioTransactionsAction, Transaction, DeletePortfolioTransactions} from \"./types\";\r\nimport { ActionCreator, Dispatch } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { AuthService } from \"../services/AuthService\";\r\n\r\nconst PORTFOLIO_SERVICE_DOMAIN = \"http://localhost:8180\";\r\n\r\nexport const getPortfolioPositionsCreator: ActionCreator<\r\nThunkAction<\r\n    void,\r\n    undefined,\r\n    null,\r\n    GotPositionsAction\r\n    >\r\n> = () => {\r\n    return async (dispatch : Dispatch) => {\r\n        let user = await AuthService.getInstance().getUser();\r\n        if(user && user.access_token != null && !user.expired) {\r\n            const header = {'Authorization': 'Bearer ' +user.access_token};\r\n            const response = await axios.get(PORTFOLIO_SERVICE_DOMAIN+'/portfolio',\r\n            {headers:header});\r\n            const portfolioState : PortfolioState = response.data;\r\n            const gotPositionsAction : GotPositionsAction = {\r\n                type : \"GotPositions\",\r\n                positions: portfolioState.positions,\r\n                isAuthenticated: true\r\n            };  \r\n            dispatch(gotPositionsAction);\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const getPortfolioTransactionsCreator: ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        GotPortfolioTransactionsAction\r\n    >\r\n> = (transactionType : string = \"\") => {\r\n    return async (dispatch : Dispatch) => {\r\n        let user = await AuthService.getInstance().getUser();\r\n        if(user && user.access_token != null && !user.expired) {\r\n            const header = {'Authorization': 'Bearer ' +user.access_token};\r\n            const response = await axios.get(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions/'+transactionType,\r\n            {headers: header});\r\n            const transactionsList : Transaction[] = response.data;\r\n            const gotTransactionsAction : GotPortfolioTransactionsAction = {\r\n                type: 'GotTransactions',\r\n                transactions : transactionsList,\r\n                isAuthenticated : true\r\n            }\r\n            dispatch(gotTransactionsAction)\r\n        } \r\n    }\r\n}\r\n\r\nexport const addPortfolioTransactionCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        AddPortfolioTransaction\r\n    >\r\n    > = (transaction: AddPortfolioTransaction) => {\r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n            let user = await AuthService.getInstance().getUser();\r\n            if(user) {\r\n                const header = {'Authorization': 'Bearer ' +user.access_token};\r\n                const response = await axios.post(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions', transaction,\r\n                {headers: header});\r\n                dispatch(getPortfolioPositionsCreator());\r\n            }\r\n        }\r\n    }\r\n\r\nexport const deleteTransactionsCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        DeletePortfolioTransactions\r\n    >\r\n> = (transactionIds : string[]) => {\r\n    return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n        let user = await AuthService.getInstance().getUser();\r\n        if(user) {\r\n            const header = {'Authorization': 'Bearer ' +user.access_token};\r\n            const response = await axios.delete(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions',{data: {id: transactionIds},headers: header})\r\n            dispatch(getPortfolioTransactionsCreator());\r\n            dispatch(getPortfolioPositionsCreator());\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Position } from '../actions/types';\r\n\r\ninterface PositionItemProps {\r\n    position: Position\r\n}\r\n\r\nconst PositionItem: React.SFC<PositionItemProps>  = (props) => {\r\n    const position = props.position;\r\n    return <tr>\r\n        <th>{position.cryptoCurrency.symbol}</th>\r\n        <th>{position.quantity}</th>\r\n        <th>{position.value}</th>\r\n    </tr>\r\n}\r\n\r\nexport default PositionItem","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addPortfolioTransactionCreator} from '../actions/protfolioActions';\r\nimport { AddPortfolioTransaction } from '../actions/types';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { History } from 'history';\r\n\r\ninterface AddTransactionFormProps {\r\n    addTransaction?: Function;\r\n}\r\n\r\ninterface AddTransactionsFormState {\r\n    cryptoSymbol: string,\r\n    type: string,\r\n    quantity: number,\r\n    price: number\r\n}\r\n\r\nclass AddTransactionForm extends React.Component<AddTransactionFormProps, any> {\r\n\r\n    constructor(props:AddTransactionFormProps) {\r\n        super(props);\r\n        this.state = {\r\n            cryptoSymbol: \"\",\r\n            type: \"\",\r\n            quantity: 0,\r\n            price: 0\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSelectChange=this.onSelectChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const transaction = {\r\n            cryptoSymbol: this.state.cryptoSymbol,\r\n            price: this.state.price,\r\n            quantity: this.state.quantity,\r\n            transactionType: this.state.type\r\n        };\r\n        if(this.props.addTransaction !== undefined) {\r\n            this.props.addTransaction(transaction);\r\n        }\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <fieldset>\r\n                    <label>Symbol</label>\r\n                    <select name = \"cryptoSymbol\" required={true} value={this.state.cryptoSymbol} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BTC\">BTC</option>\r\n                        <option value=\"LTC\">LTC</option>\r\n                    </select>\r\n                    <label>Symbol</label>\r\n                    <select name=\"type\" required={true} value = {this.state.type} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BUY\">BUY</option>\r\n                        <option value=\"SELL\">SELL</option>\r\n                    </select>     \r\n                    <label>Quantity</label> \r\n\t\t\t\t    <input type=\"number\" name=\"quantity\" required={true} value={this.state.quantity} onChange={this.onChange}/>\r\n                    <label>Price</label> \r\n\t\t\t\t    <input type=\"number\" name=\"price\" required={true} value={this.state.price} onChange={this.onChange}/>\r\n\t\t\t\t    <button name=\"addTransactionBtn\" type=\"submit\">Add Transaction</button>               \r\n                </fieldset>\r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    addTransaction: (transaction: AddPortfolioTransaction, history: History) => dispatch(addPortfolioTransactionCreator(transaction, history))\r\n  });\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(AddTransactionForm);\r\n","import * as React from \"react\";\r\nimport { Position } from \"../actions/types\";\r\nimport PositionItem from \"./PositionItem\";\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\n\r\ninterface PositionsProps {\r\n  positions: Position[];\r\n}\r\n\r\nclass Positions extends React.Component<PositionsProps> {\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Symbol</th>\r\n              <th>Quantity</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.positions.map(position => (\r\n              <PositionItem\r\n                key={position.cryptoCurrency.symbol}\r\n                position={position}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <AddTransactionForm />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Positions;\r\n","import * as React from 'react';\r\nimport { Transaction } from '../actions/types';\r\n\r\ninterface TransactionItemProps {\r\n    transaction: Transaction;\r\n    handleCheckboxChange : React.ChangeEventHandler;\r\n}\r\n\r\nconst TransactionItem: React.SFC<TransactionItemProps> = (props) => {\r\n  return <tr>\r\n  <th><input id ={props.transaction.id} name=\"selectedTransaction\" type=\"checkbox\" onChange ={props.handleCheckboxChange} value={props.transaction.id} /></th>\r\n  <th>{props.transaction.id}</th>\r\n  <th>{props.transaction.symbol}</th>\r\n  <th>{props.transaction.transactionType}</th>\r\n  <th>{props.transaction.quantity}</th>\r\n  <th>{props.transaction.price}</th>\r\n</tr>\r\n};\r\n\r\nexport default TransactionItem;","import * as React from \"react\";\r\nimport { Transaction } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioTransactionsCreator, deleteTransactionsCreator } from \"../actions/protfolioActions\";\r\nimport { connect } from \"react-redux\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\nexport interface TransactionsProps {\r\n  loadTransactions: Function;\r\n  deleteTransactions: Function;\r\n  transactions: Transaction[];\r\n}\r\n\r\ninterface TransactionFormState {\r\n  selectedTransactionIds : Set<string>\r\n}\r\n\r\nclass Transactions extends React.Component<TransactionsProps,TransactionFormState> {\r\n  \r\n  constructor(props: TransactionsProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTransactionIds : new Set()\r\n    }\r\n    this.handleSubmit=this.handleSubmit.bind(this);\r\n    this.handleCheckboxChange=this.handleCheckboxChange.bind(this);\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.props.loadTransactions();\r\n  }\r\n\r\n  handleCheckboxChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    this.toggleCheckbox(event.target.value);\r\n  }\r\n\r\n  toggleCheckbox = (transactionId : string) => {\r\n    if(this.state.selectedTransactionIds.has(transactionId)) {\r\n        this.state.selectedTransactionIds.delete(transactionId);\r\n    } else {\r\n      this.state.selectedTransactionIds.add(transactionId);\r\n    }\r\n  }\r\n\r\n  handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    console.log(e.target)\r\n    this.props.deleteTransactions(Array.from(this.state.selectedTransactionIds));\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form onSubmit={this.handleSubmit}>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Transaction Id</th>\r\n              <th>Symbol</th>\r\n              <th>Type</th>\r\n              <th>Quantity</th>\r\n              <th>Price</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n              {this.props.transactions.map((transaction, index) => (\r\n                <TransactionItem key={transaction.id} handleCheckboxChange = {this.handleCheckboxChange} transaction={transaction} />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        <button name=\"deleteTransactionBtn\" type=\"submit\">Delete Transactions</button>    \r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { transactions: state.portfolioTransactions.transactions };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadTransactions: (transactionType?: string) =>\r\n    dispatch(getPortfolioTransactionsCreator(transactionType)),\r\n  deleteTransactions : (transactionIds : string[]) => \r\n    dispatch(deleteTransactionsCreator(transactionIds))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Transactions);\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nclass Header extends React.Component<IAppProps, any> {\r\n  public render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm  navbar-light crypt_nav\">\r\n      <div className=\"container-fluid\" >\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-brand\" href=\"#\">Spring - Crypto Portfolio</a>\r\n        </div>\r\n      <ul className=\"nav navbar-nav\">\t\t\r\n        <li className=\"nav-item active\">\r\n        <Link className=\"nav-link\" to=\"/portfolio\">Home</Link>\r\n        </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/portfolio/transactions\">Transactions</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/support\">Support</Link>\r\n            </li>\r\n          </ul>\r\n      </div>\r\n    </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n\r\n","import * as React from 'react';\r\nimport { AuthService } from '../../services/AuthService';\r\n\r\ninterface LoginFormProps {\r\n    login?: Function;\r\n}\r\n\r\ninterface LoginFormState {\r\n}\r\n\r\nclass LoginForm extends React.Component<LoginFormState, any> {\r\n\r\n    private authService: AuthService;\r\n\r\n    constructor(props:LoginFormProps) {\r\n        super(props);\r\n        this.authService = AuthService.getInstance();\r\n        this.state = {\r\n\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        this.authService.login();\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n\t\t\t\t    <button name=\"loginFormBtn\" type=\"submit\">Login</button>               \r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioPositionsCreator } from \"../actions/protfolioActions\";\r\nimport { Position } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport Positions from \"./Positions\";\r\nimport Transactions from \"./Transactions\";\r\nimport Header from './Header';\r\nimport LoginForm from \"./login/LoginForm\";\r\n\r\nexport interface AppProps {\r\n  loadPositions: Function;\r\n  positions: Position[];\r\n  authenticated?: boolean;\r\n}\r\n\r\nclass Portfolio extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    this.props.loadPositions();\r\n  }\r\n\r\n  public render() {\r\n    if(!this.props.authenticated) {\r\n      return (\r\n        <div className=\"container\">\r\n      <Header/>\r\n        <Route component={LoginForm} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route path=\"/portfolio/transactions\" component={Transactions} />\r\n        <Route path=\"/portfolio\" component={() => <Positions positions={this.props.positions} />}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { positions: state.portfolio.positions, authenticated : state.portfolio.isAuthenticated};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadPositions: () => dispatch(getPortfolioPositionsCreator())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Portfolio);\r\n","import {PortfolioState, PortfolioActions, TransactionsState, PortfolioTransactionsAction, SupportState, SupportActions} from \"../actions/types\";\r\nimport { Reducer } from \"redux\";\r\n\r\nconst portfolioInitialState : PortfolioState = {positions : [], isAuthenticated : false};\r\n\r\nexport const portfolioReducer : Reducer<PortfolioState, PortfolioActions> = (\r\n    state = portfolioInitialState, action \r\n    ) => {\r\n        switch(action.type) {\r\n            case \"GotPositions\" : {\r\n                return {positions: action.positions, isAuthenticated: action.isAuthenticated};\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\nconst supportInitialState : SupportState = {queries : []}\r\n\r\nexport const supportReducer : Reducer<SupportState, SupportActions> = (\r\n    state = supportInitialState, action \r\n    ) => {\r\n        switch(action.type) {\r\n            case \"GotSupportQueries\" : {                \r\n                return {queries: action.queries };\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n    \r\nconst portfolioTransactionsInitialState : TransactionsState = {transactions: []}\r\n\r\n\r\nexport const portfolioTransactionsReducer : Reducer<TransactionsState, PortfolioTransactionsAction> = (\r\n    state = portfolioTransactionsInitialState , action\r\n) => {\r\n    switch(action.type) {\r\n        case 'GotTransactions' : {\r\n            return {transactions: action.transactions}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport { portfolioReducer, portfolioTransactionsReducer, supportReducer} from \"./portfolioReducer\";\r\nimport {PortfolioState, TransactionsState, SupportState} from '../actions/types'\r\n\r\nexport interface ApplicationState {\r\n    portfolio : PortfolioState;\r\n    portfolioTransactions : TransactionsState;\r\n    support: SupportState\r\n}\r\n\r\nexport default combineReducers<ApplicationState>({\r\n    portfolio:portfolioReducer,\r\n    portfolioTransactions: portfolioTransactionsReducer,\r\n    support: supportReducer\r\n});\r\n\r\n\r\n","import * as React from 'react';\r\nimport { SupportQuery } from '../../actions/types';\r\n\r\ninterface QueryItemProps {\r\n    query: SupportQuery,\r\n    onTableRowClick(e: React.MouseEvent<HTMLTableRowElement>): void\r\n}\r\n\r\nconst QueryItem: React.SFC<QueryItemProps>  = (props) => {\r\n    const query = props.query;\r\n    return <tr onClick={props.onTableRowClick} id = {query.id}>\r\n        <th>{query.subject}</th>\r\n        <th>{query.username}</th>\r\n        <th>{query.resolved}</th>\r\n        <th>{query.creationTime}</th>\r\n    </tr>\r\n}\r\n\r\nexport default QueryItem","import * as React from 'react';\r\nimport { SupportQueryPost } from '../../actions/types';\r\n\r\ninterface QueryPostProps {\r\n    post: SupportQueryPost;\r\n}\r\n\r\nconst QueryPost: React.SFC<QueryPostProps>  = (props) => {\r\n    const post = props.post;\r\n    return <tr>\r\n        <th>Query</th>\r\n        <th>{post.content}</th>\r\n    </tr>\r\n}\r\n\r\nexport default QueryPost;","import * as React from \"react\";\r\nimport { SupportQuery } from \"../../actions/types\";\r\nimport QueryItem from \"./QueryItem\";\r\nimport QueryPosts from \"./QueryPosts\";\r\nimport QueryPost from \"./QueryPost\";\r\n\r\n\r\ninterface QueriesProps {\r\n  queries: SupportQuery[];\r\n}\r\n\r\nclass Queries extends React.Component<QueriesProps,any> {\r\n  \r\n  constructor(props:QueriesProps) {\r\n      super(props);\r\n      this.state = {\r\n        displayPostsForQuery: \"\"\r\n      }\r\n      this.onTableRowClick=this.onTableRowClick.bind(this);\r\n  }\r\n\r\n  private onTableRowClick(e: React.MouseEvent<HTMLTableRowElement>) {\r\n    this.setState({displayPostsForQuery : e.currentTarget.id});\r\n  }\r\n\r\n  public render() {\r\n    let queriesList : SupportQuery[] = [];\r\n    if(this.props.queries) {\r\n      queriesList = this.props.queries;\r\n    }\r\n    if(this.state.displayPostsForQuery) {\r\n        const query = queriesList.find((q) => q.id === this.state.displayPostsForQuery);\r\n        if (query) {\r\n          return (<React.Fragment>\r\n            <table>\r\n            <tr><td>Subject</td><td>{query.subject}</td></tr>\r\n            <QueryPost post = {query.posts[0]}/>\r\n            </table>\r\n          </React.Fragment>);\r\n        }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Subject</th>\r\n              <th>Username</th>\r\n              <th>Resolved</th>\r\n              <th>Created</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {queriesList.map(query => (\r\n              <QueryItem onTableRowClick={this.onTableRowClick}\r\n                key={query.creationTime}\r\n                query={query}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Queries;\r\n","import axios from \"axios\";\r\nimport {GotSupportQueriesAction, SupportState, AddQueryAction, SupportQuery} from \"./types\";\r\nimport { ActionCreator, Dispatch } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { AuthService } from \"../services/AuthService\";\r\n\r\nconst SUPPORT_SERVICE_DOMAIN = \"http://localhost:8181\";\r\nexport const getSupportQueriesCreator: ActionCreator<\r\nThunkAction<\r\n    void,\r\n    undefined,\r\n    null,\r\n    GotSupportQueriesAction\r\n    >\r\n> = () => {\r\n    return async (dispatch : Dispatch) => {\r\n        let user = await AuthService.getInstance().getUser();\r\n        if(user) {\r\n            const header = {'Authorization': 'Bearer ' +user.access_token};\r\n            const response = await axios.get(SUPPORT_SERVICE_DOMAIN+'/support',\r\n            {headers:header});\r\n            const queries : SupportQuery[] = response.data;\r\n            const gotSupportQueriesAction : GotSupportQueriesAction = {\r\n                type : \"GotSupportQueries\",\r\n                queries: queries\r\n            };  \r\n            dispatch(gotSupportQueriesAction);\r\n        }\r\n    };\r\n};\r\n\r\nexport const addQueryCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        AddQueryAction\r\n    >\r\n    > = (query: AddQueryAction) => {\r\n        console.log(query);\r\n        \r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n            let user = await AuthService.getInstance().getUser();\r\n            if(user) {\r\n                const header = {'Authorization': 'Bearer ' +user.access_token};\r\n                const response = await axios.put(SUPPORT_SERVICE_DOMAIN+'/support', query,\r\n                {headers: header});\r\n                dispatch(getSupportQueriesCreator());\r\n            }\r\n        }\r\n    }","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { History } from 'history';\r\nimport { AddQueryAction } from '../../actions/types';\r\nimport { addQueryCreator } from '../../actions/supportActions';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface AddQueryFormProps {\r\n    addQuery?: Function;\r\n}\r\n\r\nclass AddQueryForm extends React.Component<AddQueryFormProps, any> {\r\n\r\n    constructor(props:AddQueryFormProps) {\r\n        super(props);\r\n        this.state = {\r\n            subject: \"\",\r\n            content: \"\",\r\n            navToMainSupportPage: false\r\n            \r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const query = {\r\n            subject: this.state.subject,\r\n            content: this.state.content        };\r\n        if(this.props.addQuery !== undefined) {\r\n            this.setState({\r\n                subject: \"\",\r\n                content: \"\",\r\n                navToMainSupportPage: true\r\n            });\r\n            this.props.addQuery(query);\r\n        }\r\n    }\r\n\r\n    onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n  public render() {\r\n      if(this.state.navToMainSupportPage) {\r\n         return <Redirect to='/support'/>\r\n      }\r\n    return (\r\n        <div className=\"form-group\">\r\n            <form className=\"form-horizontal\" onSubmit={this.handleSubmit}>\r\n                <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label className=\"col-sm-2 control-label\">Subject</label>\r\n                    <input type =\"string\" name = \"subject\" required={true} value={this.state.subject} onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\"> \r\n                    <label className=\"col-sm-2 control-label\">Query</label>\r\n                    <textarea name = \"content\" required={true} value={this.state.content} onChange={this.onChange}/>\r\n\t\t\t\t</div>  \r\n                    <button name=\"addQueryBtn\" type=\"submit\">Add Query</button>               \r\n                </fieldset>\r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    addQuery: (query: AddQueryAction, history: History) => dispatch(addQueryCreator(query, history))\r\n  });\r\n\r\nexport default connect(null,mapDispatchToProps)(AddQueryForm);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\n\r\nimport { SupportQuery, SupportState } from \"../../actions/types\";\r\nimport Header from \"../Header\";\r\nimport Queries from \"./Queries\";\r\nimport { getSupportQueriesCreator } from \"../../actions/supportActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddQueryForm from \"./AddQueryForm\";\r\nimport { ApplicationState } from \"../../reducers\";\r\n\r\nexport interface AppProps {\r\n  loadQueries: Function;\r\n  queries: SupportQuery[];\r\n}\r\n\r\nclass UserSupport extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    this.props.loadQueries();\r\n  }\r\n\r\n  public render() {    \r\n    return (\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Link className=\"nav-link\" to=\"/support/compose_query\">Add New</Link>\r\n      <Switch>\r\n        <Route path =\"/support/compose_query\" component = {AddQueryForm}/>\r\n        <Route path=\"/support\" component={() => <Queries queries={this.props.queries} />}/>\r\n      </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { queries: state.support.queries };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({  \r\n  loadQueries: () => dispatch(getSupportQueriesCreator())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserSupport);\r\n","import React, { Component} from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Portfolio from './components/Portfolio';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport store from \"./store/store\";\nimport LoginForm from './components/login/LoginForm';\nimport UserSupport from './components/support/UserSupport';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store = {store({})}>\n      <Router>\n        <div className=\"App\">\n        <Route path=\"/login\" component={LoginForm} />\n        <Route  path=\"/portfolio\" component={Portfolio} />\n        <Route path=\"/support\" component={UserSupport}/>\n        </div>\n      </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import {createStore,applyMiddleware,compose, Store, StoreCreator} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport default function configureStore(initialState: any) {\r\n\r\n    return createStore(rootReducer,initialState,\r\n        compose(applyMiddleware(thunk)));\r\n\r\n};\r\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}